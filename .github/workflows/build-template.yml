name: docker-build-template

on:
  workflow_call:
    inputs:
      IMAGE_CONTEXT:
        required: true
        type: string
      BUILD_CONTEXT:
        required: false
        type: string
        default: ""
      IMAGE_FILE:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      REGISTRY:
        required: true
        type: string

    secrets:
      REGISTRY_USER:
        required: true
      REGISTRY_PASSWORD:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ inputs.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=schedule,pattern={{date 'YYYYMMDD-hhmmss' tz='America/Vancouver'}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.IMAGE_CONTEXT }}
          build-contexts: ${{ inputs.BUILD_CONTEXT }}
          build-args: |
            VERSION=${{ fromJSON(steps.meta.outputs.json).tags['org.opencontainers.image.created'] }}
          file: ${{ inputs.IMAGE_FILE }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
