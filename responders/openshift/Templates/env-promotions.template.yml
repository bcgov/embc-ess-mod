apiVersion: v1
kind: Template
metadata:
  name: responders-portal-env-promotions
  annotations:
    description: "Pipelines to promote responders portal images to higher environments"
objects:
  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "responders-portal-promote-test"
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            node {
              stage('tag image'){
                openshift.withCluster() {
                    openshift.withCredentials() {
                        openshift.tag('responders-portal-api:latest', 'responders-portal-api:test')
                        openshift.tag('responders-portal-ui:latest', 'responders-portal-ui:test')
                    }
                    openshift.withProject('b5e079-test') {
                        def uiAppName = 'test-responders-portal-ui'
                        def apiAppName = 'test-responders-portal-api'
                        def uiLastVersion = openshift.selector('dc', uiAppName).object().status.latestVersion
                        def uiRc = openshift.selector('rc', uiAppName + '-' + + uiLastVersion)
                        uiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                        def apiLastVersion = openshift.selector('dc',apiAppName).object().status.latestVersion
                        def apiRc = openshift.selector('rc', apiAppName + '-' + apiLastVersion)
                        apiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                    }
                }
              }
            }
  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "responders-portal-promote-training"
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            node {
              stage('tag image'){
                openshift.withCluster() {
                    openshift.withCredentials() {
                        openshift.tag('responders-portal-api:test', 'responders-portal-api:training')
                        openshift.tag('responders-portal-ui:test', 'responders-portal-ui:training')
                    }
                    openshift.withProject('b5e079-test') {
                        def uiAppName = 'training-responders-portal-ui'
                        def apiAppName = 'training-responders-portal-api'
                        def uiLastVersion = openshift.selector('dc', uiAppName).object().status.latestVersion
                        def uiRc = openshift.selector('rc', uiAppName + '-' + + uiLastVersion)
                        uiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                        def apiLastVersion = openshift.selector('dc',apiAppName).object().status.latestVersion
                        def apiRc = openshift.selector('rc', apiAppName + '-' + apiLastVersion)
                        apiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                    }
                }
              }
            }
  - kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "responders-portal-promote-prod"
    spec:
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            node {
              stage('approval') {
                timeout(time: 30, unit: 'DAYS') {
                  input message: "Deploy to prod?"
                }    
              }
               stage('tag image'){
                openshift.withCluster() {
                    openshift.withCredentials() {
                        openshift.tag('responders-portal-api:training', 'responders-portal-api:prod')
                        openshift.tag('responders-portal-ui:training', 'responders-portal-ui:prod')
                    }
                    openshift.withProject('b5e079-prod') {
                        def uiAppName = 'production-responders-portal-ui'
                        def apiAppName = 'production-responders-portal-api'
                        def uiLastVersion = openshift.selector('dc', uiAppName).object().status.latestVersion
                        def uiRc = openshift.selector('rc', uiAppName + '-' + + uiLastVersion)
                        uiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                        def apiLastVersion = openshift.selector('dc',apiAppName).object().status.latestVersion
                        def apiRc = openshift.selector('rc', apiAppName + '-' + apiLastVersion)
                        apiRc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                        }
                    }
                }
               }
            }
